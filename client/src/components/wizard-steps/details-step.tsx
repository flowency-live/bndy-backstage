// DetailsStep - Event details, title, description, tickets
import { useState } from 'react';
import { Sparkles, FileText, Ticket, PoundSterling, ChevronDown } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import type { PublicGigFormData } from '@/components/public-gig-wizard';

interface DetailsStepProps {
  formData: PublicGigFormData;
  onUpdate: (data: Partial<PublicGigFormData>) => void;
  artistName: string;
}

export default function DetailsStep({ formData, onUpdate, artistName }: DetailsStepProps) {
  const [showTicketInfo, setShowTicketInfo] = useState(false);

  // Auto-generate title if not manually edited
  const defaultTitle = formData.venueName ? `${artistName} @ ${formData.venueName}` : '';
  const showAutoGenerated = !formData.title || formData.title === defaultTitle;

  return (
    <div className="space-y-6">
      {/* Title */}
      <div>
        <label className="block text-sm font-semibold text-foreground mb-2">
          Event Title
          {showAutoGenerated && (
            <span className="ml-2 text-xs font-normal text-muted-foreground">
              (auto-generated)
            </span>
          )}
        </label>
        <div className="relative">
          <Sparkles className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5" />
          <Input
            type="text"
            value={formData.title || defaultTitle}
            onChange={(e) => onUpdate({ title: e.target.value })}
            placeholder={`e.g., ${defaultTitle}`}
            className="pl-10 pr-4 min-h-[56px] md:min-h-[44px] text-base"
          />
        </div>
      </div>

      {/* Description */}
      <div>
        <label className="block text-sm font-semibold text-foreground mb-2">
          Description (Optional)
        </label>
        <div className="relative">
          <Textarea
            value={formData.description || ''}
            onChange={(e) => onUpdate({ description: e.target.value })}
            placeholder="Tell people about your gig..."
            rows={5}
            className="resize-none text-base"
          />
          <div className="absolute bottom-2 right-2 text-xs text-muted-foreground">
            {formData.description?.length || 0}/500
          </div>
        </div>
      </div>

      {/* Ticket Information - Collapsible */}
      <div className="border border-border rounded-xl overflow-hidden">
        <button
          type="button"
          onClick={() => setShowTicketInfo(!showTicketInfo)}
          className="w-full flex items-center justify-between p-4 hover:bg-accent/50 transition-colors"
        >
          <div className="flex items-center gap-2 text-sm font-semibold text-foreground">
            <Ticket className="w-4 h-4" />
            Ticket Information (Optional)
          </div>
          <ChevronDown className={`w-5 h-5 text-muted-foreground transition-transform ${showTicketInfo ? 'rotate-180' : ''}`} />
        </button>

        {showTicketInfo && (
          <div className="p-4 pt-0 space-y-4">
            {/* Ticket URL */}
            <div>
              <label className="block text-xs text-muted-foreground mb-2">
                Ticket URL
              </label>
              <Input
                type="url"
                value={formData.ticketUrl || ''}
                onChange={(e) => onUpdate({ ticketUrl: e.target.value })}
                placeholder="https://example.com/tickets"
                className="text-base min-h-[56px] md:min-h-[44px]"
              />
            </div>

            {/* Ticket Price */}
            <div>
              <label className="block text-xs text-muted-foreground mb-2">
                Ticket Price
              </label>
              <div className="relative">
                <PoundSterling className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                <Input
                  type="text"
                  value={formData.ticketPrice || ''}
                  onChange={(e) => onUpdate({ ticketPrice: e.target.value })}
                  placeholder="Free / £10 / £5-£15"
                  className="pl-10 pr-4 text-base min-h-[56px] md:min-h-[44px]"
                />
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
